import re


def get_class_name(value):
    b = re.findall("class (.*?)\(.*\):\n", ''.join(value))[0]
    return b


def get_method_name(value):
    b = re.findall("def (test_.*?)\(self\):\n", ''.join(value))[0]
    return b


def format_ui_case(file_path):
    # 修改selenium-ide录制的py脚本 为remote格式 支持远程执行
    add_content_end = "def main(cmd_param=None):\n    if cmd_param:\n        ip = cmd_param\n    else:\n        ip = '127.0" \
                     ".0.1'\n    suite = unittest.TestSuite()\n    suite = ParamUnittestSuite(suite)\n    # 在此处添加需要执行测试用例\n    suite.addTest(unittestclass" \
                     ", 'unittestmethod', 'http://{}:4444/wd/hub'.format(ip))\n\n    runner = unittest.TextTestRunner()\n    run" \
                     "ner.run(suite)\n\nif __name__ == '__main__':\n    cmd_param = sys.argv\n    if len(cmd_param) == 1" \
                     ":\n        main()\n    else:\n        main(sys.argv[1])"

    add_content_start = "# Generated by Selenium IDE\nimport sys\nimport os\ncurPath = os.path.abspath(os.path.dirname(__" \
                       "file__))\nrootPath = curPath[:curPath.find('new_investment_trading_system')+len('new_investment_" \
                       "trading_system')]\nsys.path.append(rootPath)\n"

    add_content_init = "  def __init__(self, methodName='runTest', params=''):\n    super().__init__(methodName)\n    self.remoteip = params\n"
    add_content_param = 'Securities_xls = common.get_xls("", "Sheet1", "")\n@paramunittest.parametrized(*Securities_xls)\n'

    with open(file_path, 'r', encoding='utf-8') as f:
        value = f.readlines()
    for i in range(0, len(value)):
        # 进行判断
        row_value = value[i]
        if "self.driver = webdriver.Chrome()" in row_value:  # 测试用例内容替换为远程执行模式
            value[i] = '    self.driver = selenium.webdriver.remote.webdriver.WebDriver(command_executor=self.remoteip,desired_capabilities=DesiredCapabilities.CHROME)\n'
        elif "from selenium import webdriver" in row_value:
            value[i] = 'import selenium.webdriver.remote.webdriver\n'
        elif "import pytest" in row_value:
            value[i] = 'import unittest\nfrom testCase.paramunittest import *\nfrom common import common\n'
        elif "class" in row_value and "():" in row_value:
            value[i] = add_content_param + value[i].replace("()", "(unittest.TestCase)") + add_content_init
        elif "setup_method" in row_value:
            value[i] = "  def setUp(self):\n"
        elif "teardown_method" in row_value:
            value[i] = "  def tearDown(self):\n"

    class_name = get_class_name(value)  # 根据文件内容获取类名称
    method_name = get_method_name(value)  # 根据文件内容获取测试方法名称
    add_content_end = add_content_end.replace('unittestclass', class_name).replace('unittestmethod', method_name)  # 脚本增加的内容进行数据替换
    value[0] = add_content_start
    file_content = "".join(value) + "\n" + add_content_end

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(file_content)


if __name__ == '__main__':
    format_ui_case('/root/project/new_investment_trading_system/testCase/ui_testCase/test.py')
