import sys
import os
import unittest
import json
import time
import traceback

import selenium.webdriver.remote.webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import NoSuchAttributeException
from selenium.webdriver.support import expected_conditions as EC
from func_timeout import func_set_timeout, FunctionTimedOut

curPath = os.path.abspath(os.path.dirname(__file__))
rootPath = os.path.split(curPath)[0]
sys.path.append(rootPath)

go_on_flag = True

from automatic_ui.common.tools import exception_handle
from common import mysql_operation

screenshot_path = "{screenshot_path}"
if not os.path.exists(screenshot_path):
    os.mkdir(screenshot_path)


@func_set_timeout(5)
def get_driver(remoteip):
    browser_driver = selenium.webdriver.remote.webdriver.WebDriver(command_executor=remoteip, desired_capabilities=DesiredCapabilities.CHROME)
    return browser_driver

class SceneSetting(unittest.TestCase):
    def __init__(self, methodName='runTest', params=""):
        super().__init__(methodName)
        self.params = params

    def setUp(self):
        self.explicit_wait_timeout = float("{explicit_wait_timeout}")
        self.explicit_wait_poll_time = float("{explicit_wait_poll_time}")
        self.implicit_wait_timeout = float("{implicit_wait_timeout}")
        remoteip = "http://{remoteip}:4444/wd/hub"
        try:
            self.driver = get_driver(remoteip)
        except FunctionTimedOut as e:
            exception_detail = traceback.format_exc()
            raise SyntaxError("执行机%s链接超时 请检查执行机ip 或 执行机是否启动jar包\n错误详情:%s"%(remoteip, exception_detail))
        self.driver.implicitly_wait(self.implicit_wait_timeout)  # 设置隐式等待
        self.driver.maximize_window()  # 全屏窗口

{function_position}
    def tearDown(self):
        self.driver.quit()
